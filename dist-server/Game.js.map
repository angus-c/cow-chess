{"version":3,"sources":["../src/server/Game.js"],"names":[],"mappings":"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","file":"Game.js","sourcesContent":["// import nextMove from '../modules/nextMove';\n\nconst COLORS = ['white', 'black'];\nconst UNICODE_OFFSET = 65;\n\nconst [R, N, B, K, Q, P] = ['R', 'N', 'B', 'K', 'Q', 'P'];\nconst [r, n, b, k, q, p] = ['r', 'n', 'b', 'k', 'q', 'p'];\nconst _ = null;\n\n/*eslint-disable */\nconst STARTING_MAP = [\n  r,n,b,q,k,b,n,r,\n  p,p,p,p,p,p,p,p,\n  _,_,_,_,_,_,_,_,\n  _,_,_,_,_,_,_,_,\n  _,_,_,_,_,_,_,_,\n  _,_,_,_,_,_,_,_,\n  P,P,P,P,P,P,P,P,\n  R,N,B,Q,K,B,N,R\n];\n// const STARTING_MAP = [\n//   _,_,_,_,_,_,_,_,\n//   _,_,_,_,_,_,_,_,\n//   _,_,_,_,_,_,_,n,\n//   n,_,_,_,_,_,_,_,\n//   _,_,_,_,_,_,_,_,\n//   _,_,_,_,_,_,_,_,\n//   _,_,_,_,_,_,R,_,\n//   _,_,B,_,_,_,_,_,\n// ];\n/*eslint-enable */\n\n// players\nconst north = {\n  name: 'north',\n  case: 'toLowerCase',\n  relativeDirection(actualDirection) {\n    return actualDirection;\n  }\n};\n\nconst south = {\n  name: 'south',\n  case: 'toUpperCase',\n  relativeDirection(actualDirection) {\n    return actualDirection;\n  }\n};\n\nexport default class Game {\n  constructor() {\n    this.players = [north, south];\n    south.color = COLORS[0];\n    north.color = COLORS[1];\n\n    // TODO: move config to DB on server\n    this.state = {\n      nextPlayer: this.players.filter(player => player.color == COLORS[0])[0],\n      position: STARTING_MAP,\n      moves: [],\n      config: {\n        probeDepth: 4,\n        cutOffDepth: 3,\n        cutOffProportion: 0.5\n      }\n    };\n\n    // // autoplay test\n    // let nextPlayer = south, moves = 0;\n    // const play = setInterval(() => {\n    //   this.generateMove(nextPlayer);\n    //   nextPlayer = (nextPlayer == south) ? north : south;\n    //   moves++;\n    //   if (moves > 10) {\n    //     window.clearInterval(play);\n    //   }\n    // }, 1000);\n  }\n\n  get() {\n    return this.state;\n  }\n\n  set(updates) {\n    this.state = Object.assign({}, this.state, updates);\n  }\n\n  updatePosition(move) {\n    let position = {...this.state.position};\n    position[move.to] = position[move.from];\n    position[move.from] = null;\n    this.set({position});\n  }\n\n  getOtherPlayer(player) {\n    return player == this.players[0] ? this.players[1] : this.players[0];\n  }\n}\n"]}