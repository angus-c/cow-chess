{"version":3,"sources":["../../src/server/pieces/Piece.js"],"names":[],"mappings":"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","file":"Piece.js","sourcesContent":["import south from '../players/south';\n// import profiler from '../../utilities/profiler';\n\n// TODO: remove subclass reference\nimport Pawn from './Pawn';\n\nclass Piece {\n  constructor(player) {\n    this.owner = player;\n    this.hasMoved = false;\n    // TODO support color switch\n    this.color = this.owner.name === south.name ? 'white' : 'black';\n    const classStub = this.constructor.classStub;\n    if (classStub) {\n      const colorStub = this.color == 'white' ? 'w' : 'b';\n      this.className = `${colorStub}-${this.constructor.classStub}`;\n      console.log(this.color, this.className);\n    }\n  }\n\n  getRank(id) {\n    return this.owner === south ?\n      8 - Math.floor((id || this.squareId) / 8) :\n      1 + Math.floor((id || this.squareId) / 8);\n  }\n\n  possibleMoves(pieceMap) {\n    const moves = [];\n    const {diagonal, cardinal, knightwards} = this.constructor.moveDescriptor;\n    diagonal && moves.push(...this.possibleDiagonalMoves(pieceMap));\n    cardinal && moves.push(...this.possibleCardinalMoves(pieceMap));\n    knightwards && moves.push(...this.possibleKnightMoves(pieceMap));\n    return moves;\n  }\n\n  possibleDiagonalMoves(pieceMap) {\n    let moves = [], squareId;\n    [-1, 1].forEach(columnDir => {\n      [-1, 1].forEach(rowDir => {\n        squareId = this.squareId;\n        while (squareId += (columnDir + rowDir * 8), this.isOnBoard(squareId, columnDir)) {\n          const {destinationPiece, isCapture, forwards, projectable} =\n            this.getMoveDetails(squareId, pieceMap, rowDir);\n          const diagonal = this.constructor.moveDescriptor.diagonal;\n          if (\n            (destinationPiece && !isCapture) ||\n            (typeof diagonal == 'function' && !diagonal(isCapture, forwards))\n          ) {\n            break;\n          }\n          const move = {from: this.squareId, to: squareId, player: this.owner};\n          this.addMoveInfo(move, destinationPiece, pieceMap);\n          moves.push(move);\n          if (destinationPiece || !projectable) {\n            break;\n          }\n        }\n      });\n    });\n    return moves;\n  }\n\n  possibleCardinalMoves(pieceMap) {\n    let moves = [], squareId;\n    [-1, 0, 1].forEach(columnDir => {\n      [-1, 0, 1].forEach(rowDir => {\n        if ((columnDir == 0 || rowDir == 0) && (columnDir != rowDir)) {\n          squareId = this.squareId;\n          while (squareId += (columnDir + rowDir * 8), this.isOnBoard(squareId, columnDir)) {\n            const {destinationPiece, isCapture, forwards, projectable} =\n              this.getMoveDetails(squareId, pieceMap, rowDir);\n            const cardinal = this.constructor.moveDescriptor.cardinal;\n            if (\n              (destinationPiece && !isCapture) ||\n              (typeof cardinal == 'function' && !cardinal(isCapture, forwards))\n            ) {\n              break;\n            }\n            const move = {from: this.squareId, to: squareId, player: this.owner};\n            this.addMoveInfo(move, destinationPiece, pieceMap);\n            moves.push(move);\n            if (\n              destinationPiece ||\n              !projectable ||\n              (this instanceof Pawn) && (this.getRank(squareId) == 4) /* TODO */\n            ) {\n              break;\n            }\n          }\n        }\n      });\n    });\n    return moves;\n  }\n\n  possibleKnightMoves(pieceMap) {\n    let squareId, moves = [];\n    [-2, -1, 1, 2].forEach(columnDir => {\n      [-2, -1, 1, 2].forEach(rowDir => {\n        if (Math.abs(columnDir) + Math.abs(rowDir) == 3) {\n          squareId = this.squareId + (columnDir + rowDir * 8);\n          if (this.isOnBoard(squareId, columnDir)) {\n            const destinationPiece = pieceMap[squareId];\n            if (destinationPiece && (destinationPiece.owner === this.owner)) {\n              return;\n            }\n            const move = {from: this.squareId, to: squareId, player: this.owner};\n            this.addMoveInfo(move, destinationPiece, pieceMap);\n            moves.push(move);\n          }\n        }\n      });\n    });\n    return moves;\n  }\n\n  addMoveInfo(move, destinationPiece) {\n    if (destinationPiece) {\n      move.captures = destinationPiece;\n    }\n    // const player = move.player;\n    // TODO: attach all this to move\n    // const toRow = 1 + Math.floor(move.to / 8);\n    // const toColumn = 1 + (move.to % 8);\n    // const rowAhead = toRow < 8 ? toRow + player.relativeDirection(1) : null;\n    // const rowBehind = toRow > 1 ? toRow - player.relativeDirection(1) : null;\n    // const columnLeft = toColumn > 1 ? toColumn - player.relativeDirection(1) : null;\n    // const columnRight = toColumn < 8 ? toColumn + player.relativeDirection(1) : null;\n    // if (rowAhead) {\n    //   if (columnLeft) {\n    //     move.forwardLeft = (rowAhead - 1) * 8 + (columnLeft - 1);\n    //   }\n    //   if (move.columnRight) {\n    //     move.forwardRight = (rowAhead - 1) * 8 + (columnRight - 1);\n    //   }\n    // }\n    // if (rowBehind) {\n    //   if (columnLeft) {\n    //     move.backwardLeft = (rowBehind - 1) * 8 + (columnLeft - 1);\n    //   }\n    //   if (move.columnRight) {\n    //     move.backwardRight = (rowBehind - 1) * 8 + (columnRight - 1);\n    //   }\n    // }\n  }\n\n  getMoveDetails(squareId, pieceMap, rowDir) {\n    const destinationPiece = pieceMap[squareId];\n    const isCapture = destinationPiece && (destinationPiece.owner != this.owner);\n    const forwards = this.owner.relativeDirection(rowDir) == 1;\n    let projectable = this.constructor.moveDescriptor.projectable;\n    (typeof projectable == 'function') && (projectable = projectable(this.getRank()));\n    return {destinationPiece, isCapture, forwards, projectable};\n  }\n\n  afterMove(destination) {\n    this.hasMoved = true;\n  }\n\n  isOnBoard(squareId, colDir) {\n    if (squareId < 0 || squareId > 63) {\n      return false;\n    }\n    // check for column wrapping\n    if (colDir) {\n      const col = squareId % 8;\n      if (colDir < 0) {\n        return col <= (7 + colDir);\n      }\n      if (colDir > 0) {\n        return col >= (0 + colDir);\n      }\n    }\n    return true;\n  }\n}\n\nexport default Piece;\n"]}